RELEASENOTES MARLIN VERSION 7.x
===============================

For releasenotes of the previous main version (6.x), see the separate file "Releasenotes_v6.txt".
This document contains all release notes and remarks beginning with version 7.0. The document
would otherwise grow to large and complex.

Version 7.x contains the new MarlinModule that (again) allows to be used with staticly linked
application modules (DLL's), and so optimize the depoloyment and stack tracing capabilities
----------------------------------------------------------------------------------------------

CHANGES IN VERSION 7.4.0
------------------------
1)  Changed the header mappings for HTTP/SOAP/JSON-Message objects and the HTTPClient
    Created a new case-insensitive multimap for these kind of headers.
    Only "Set-Cookie" can now be a duplicate header, as internet servers can send more than
    one (1) of these cookies back.
2)  Corrections for the HTTPManager. All program resources are now in EN/US locale.
3)  Corrections for de-duplicating server headers in the following server modules
    - HTTPServerIIS
    - HTTPServerSync
    - HTTPRequest
4)  Strict separation of SOAP 1.1 and SOAP 1.2:
    - 1.1  o Version is defined by namespace "http://schemas.xmlsoap.org/soap/envelope/" of the soap "<Envelope>" root element
           o SoapAction is defined by HTTP-Header "SOAPAction"
    - 1.2  o Version is defined by namespace "http://www.w3.org/2003/05/soap-envelope" of the soap "<Envelope>" root element
           o SoapAction is defined by "action" element in the HTTP-Header "Content-Type"
5)  SOAPAction can be overridden in HTTPClient / WebServiceClient
6)  Server authentication will only be retrieved from the HTTP stack in case we have a configured
    authentication for a site. This prevents the 401 message in case of a non-authenticated site.
7)  Bug fix for OAuth2Cache. Stop asking for a new bearer token on each call.
8)  De general utility function "StartProgram" now has an extra option to return the 'RunRedirect'
    object and you will be able to call the "IsChildRunning" end "TerminateChildProcess".
9)  Added a 'SetFieldInHTTPHeader' function to encapsulate all cases of a HTTP header field value
    including working with appended fields an quotes for field values that have spaces in them
10) All headers will now be retained in the HTTPMessage. This change is made for the HTTPClient
    as well as for all server objects. The "SetAllHeaders" method of the HTTPSite and the
    "ReadAllHeaders" method of the HTTPClient have been removed!
11) As a extension to 'SendResponse', it is now possible to send a partial response with
    the new HTTPSite method 'SendAsChunk(HTTPMessage* p_msg,bool p_final)'
    This allows to send an answer in chunks. This works as long as you send multiple chunks
    with the p_final parameter as false and 1 (one) last chunk with the parameter set to true!
    Beware that it is not possible to send SOAP or JSON messages in chunks. This only works for
    the general HTTPMessage.
    See the 'TestChunking' testcase in the testset for an example.
12) The HTTPClient is also aware of the chunking input. In cases where WinHTTP does not catch the
    chunking of the input buffers, the HTTPClient now will kick in and de-chunk the input.
13) The SOAPMessage object now also has a CrackedURL member as does the HTTPMessage and the JSONMessage.
    Copying and inheriting the URL is now faster and much more transparent.

CHANGES in VERSION 7.3.0
------------------------
1)  The IIS web.config has been expanded with an administrators emailadress for crash reports.
    This upgrades the MarlinModule to 7.3.0 and the ServerApp depends on that.
    You must upgrade your application accordingly.
2)  web.config as a configuration file has totally been replaced by "Marlin.config"
    This removes the confusion between this web.config and that of the IIS system.
    HTTPManager now only configures and edits 'marlin.config' files.
3)  Removed all references to 'localhost'
4)  Corrections for the 'bcd' class for the first 100,000,000 numbers above MAXINT32
5)  HTTPClient retains the last OAuth2 bearer token, so it can be queried afterwards.
6)  Simplifying the scanning for UTF-8 / MBCS characters in JSON strings.
7)  The MarlinModule has been enhanced with SEH try-catch loops for starting and stopping an
    IIS application. Applications must be ported to MarlinModule of this version (7.3.0)

CHANGES IN VERSION 7.2.0
------------------------
1)  Added the new ServerEventDriver and ClientEventDriver for the transparent event framework.
    Clients now can choose between the following three ways of getting event messages from 
    the webserver
    1) WebSockets (IIS only !)
    2) Server-Sent-Events (Eventsource)
    3) Long-Polling
    If firewalls do not allow for SSE, you can opt-in by policy for WebSockets or polling
2)  See the manual in the ServerEventDriver.h interface file and ClientEventDriver.h
    For examples: see the MarlinClient testframe and "TestEventDriver.cpp"
3)  The logfiles (LogAnalysis) now has the capability to write in the foreground, without
    an extra background write trhead, so that we can write multiple smaller logfiles without
    overly starting a bunch of OS-threads
4)  WebConfig IIS can now relate to it's application pool and its settings
5)  For security reasons the ability to accept and parse 'username' and 'password' combinations
    in the URL (in front of the origin server: http://username:password@server:port) has been
    removed. This ability is inherently unsafe, as passwords will be cached in the internet 
    servers and proxies in the URL logging files.
    Authentication and authorization can now only be performed from within designated HTTP headers
    and/or the payload an internet messages is carrying.
    CrackedURL has no longer the ability to parsae username/password.
    HTTP/SOAP/JSON Messages now have individual 'm_user' and 'm_password' members to carry this
    information throughout your applications. The interface of these objects have *NOT* changed.
6)  Dropped support of 32-bits versions

CHANGES IN VERSION 7.1.0
------------------------
1)  Added the new class JSONPointer as per IETF RFC 6901 (Full implementation)
    You can point to any member of a JSON with the pointer path reference
    See the TestJSON.cpp file in the client project for test cases and examples of JSONPointer.
2)  JSONPointer can act not only on JSONPointer names, but also on JSONPath names with the
    standard '.' notation for delimiters

    A JSONPointer can be one of the following:
    - "" or "$"             -> Empty string -> Whole JSON document is matched
    - "/any/path/3/name"    -> Standard JSONPointer path implied by first '/' char
    - "#/any/path/3/name"   -> JSONPointer comes from an URL anchor, replace the URL escape chars
    - "$.any.path.3.name"   -> Standard JSONPath implied by first '$' char. Changes delimiter to '.'
    - "#$.any.path.3.name"  -> JSONPath name comes from an URL ancher, replace URL escape chars 
                               AND change delimiter to '.'
3)  Extensive re-write of the ""Redirect"" and "RunRedirect" classes to run a command in the
    background. Funcionality now includes:
    - Redirecting and distinguishing between standard-output and standard error
    - Support for a virtual console to write the standard input and output to
    - New "PosixCallProgram" function including all of the new functionality
    - True timeout on a command
4)  The recognition of strings in a JSON has been expanded to be able to handle the mixing of the
    following situations and possibilities:
    - Plain 7 bit ASCII strings;
    - UTF-8 strings as per JSON standard. Strings can only contain UTF-8 escapes, but up to the
      full 21 bits in the Unicode standard;
    - Strings with MBCS escape characters of the win-1252 codepage, as used in Western-Europe;
    - Strings with UTF-16 escape characters in them, coded as '\uXXXX' as per JSON standard;
    - Mixing of strings with MBCS / UTF-8 / UTF-16 escape characters. In this situation the mixed
      strings can only contain UTF-8 and MBCS characters in the '16 bit Multilangual Unicode Plane'.
    Each string within the document can have a different mixing of these. So it is possible that
    one string has only UTF-8 (with effectivly 21 bits in use) while another string might have a 
    mixing of MBCS and UTF-16 escape codes!
5)  As a result of the better UTF-8 recognition, the implementation of the JSONMessage and the
    JSONParser could be simplified. The character encoding and bom-status are no longer stored in 
    the JSONMessage itself.
6)  Added a new function to ConvertWideString "bool DetectUTF8(string)". Use at your leasure!
7)  Added the implementation of the IETF draft for the JSONPath. See the JSONPath.h for documentation
    Currently the following parts of the draft are implemented:

    Path                     Selects the following
    ------------------------ ---------------------------------------
    $.one.two.three          object selection
    $.one[2].three           array (3th element).object selection
    $['one']['two']['three'] object selection
    $['one'][2]['three]      array (3th element).object selection
    $                        Whole document (selects the root)
    $..*                     Whole document (selects the root)
    $.one..something         Recursive find 'something' under 'one'
    $.one.two.*              All elements of 'two'
    $.one.two[:4]            Slice operator, array elements 0,1,2,3
    $.one.two[1:8:2]         Slice operator, array elements 2,4,6
    $.one.two[:8:2]          Slice operator, array elements 0,2,4,6
    $.one.two[2::3]          Slice operator, array elements 3,6,9,...
    $.one.two[3,4,7]         Union operator, array elements 4,5,8
8)  Added a "ComputeCRC32" function to calculate the CRC32 checksum over a specified length of
    buffer of bytes.
9)  Added "FastEncryption" and "FastDecription" to the Crypto class, using the newer BCrypt
    interface from Microsoft.
10) Added a (partial) XPath implementation.
    See the XPath.h header for further manual and clarification.
11) Changed the implementation of the request headers in the HTTPClient.
    It is now possible to register explicitly duplicate request headers or unique request headers
    The "AddHeader" has a third optional parameter (p_unique) with a standard value of 'true'


CHANGES IN VERSION 7.0.1
------------------------
1)  Added 'samesite' option to cookies
2)  Added 'recurse' option to the 'FindValue' methods of the JSONMessage

CHANGES IN VERSION 7.0.0
------------------------
1)  All Analasys logfiles removed from MarlinModule. All memory allocation from the loaded DLL's
    go now back to the DLL's. This is done so we can move back to static linked librarys and
    static linked MFC environments.
2)  The MarlinModule can be put in 'debugging' mode by placing a 'debug.txt' file in the
    %WINDIR%\System32\inetsrv directory. The file can be empty, it only need to be.
    Extra information will then be written to the Windows WMI log. Information that previously
    went to the "Marlin" logfile under ""C:\Inetpub\Logs\Logfiles\Marlin"
3)  All project moved from dynamicly linked DLL's to static libraries
4)  Continued work on WebSockets in IIS. 
    Reading and writing of messages longer than 1 frame now work correctly
    Websockets can be closed both from the client and from the server-side end of things.
5)  Please always use the "RegisterMessagesDllForService()" call in your server applications.
    otherwise fill in the ""g_svcname" global parameters. 
    Otherwise your application will continue to run as "Marlin for IIS" as configured in 
    the "Marlin_for_IIS" in the MS-Windows WMI Event log.
6)  Corrections in the CTOR methods of SOAPMessage. Copying of the headermap was added in
    all CTOR's.
7)  Extra error for SOAPMessage with a <Action> header and a "mustunderstand=true" attribute,
    with no operational soapaction in that header (basically an empty node).
8)  The new ServerApp methode "MinMarlinVersion" can now check the version of the used MarlinModule
    that starts it from IIS. It has the potential to reject the current used module.
    Modules with a version number under 7.0.0 or 8.0.0 and above are rejected
9)  Client testsets have been expanded voor WebSocket testing in IIS.
10) Better deduction of the MS-WIndows version in the crash reports
11) Faster parsing of a SOAP/XML message into a JSONMessage. Does *NOT* require to reconstruct
    the SOAP message, but does it internally.
12) Various fixes for SEH Translators.
13) Verb-tunneling expanded to all HTTP verbs.
14) JSON whitespace printing changed from two spaces to TAB character
15) Added the JSON methode "AddNamedObject(name,object,force-array)"
    See the MarlinClient testset for an example.
16) JSON's now support conversion of XML sets to JSON arrays.
17) The ability to search recursively through a JSON or just the first chosen level.

