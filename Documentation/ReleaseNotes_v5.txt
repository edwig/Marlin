RELEASENOTES MARLIN VERSION 5.x
===============================

For releasenotes of the previous main version (4.x), see the separate file "Releasenotes_v4.txt".
This document contains all release notes and remarks beginning with version 5.0. The document
would otherwise grow to large and complex.
Version 5.x contains NO real function breaks but adds IIS capabilities for the application pool
and further maturity changes for IIS in general
----------------------------------------------------------------------------------------------

CHANGES IN VERSION 5.2.2
------------------------
1) Fixed a bug in the response of a SOAP 1.1 message, where a wrong content-type was sent to the caller.
2) Logfiles under IIS are restructured to use only 1 (one) logfile per application.

CHANGES IN VERSION 5.2.1
------------------------
1) Fixed a serious bug in the "SocketToServer" base function in case of a IP6 address. Local addresses
   are delivered in short ip6 format and cannot be reused to send messages. General HTTP functions and
   browsers cannot use these shortened versions of IP6 adresses with adapter postfixes like "%eth0".
   So the full IP6 adress of 8 hexadecimal numbers is reconstructed there to make sure the client or host 
   on the other side of the socket can be reached.
2) Fixed a memory leak in ServerApp for the IIS configurations
3) WebConfig: it's possible to 'ForgetChanges', so an in-memory copy of the web.config is not sync'ed 
   back to file in case of an override.
4) Secure/not-secure versions of HTTP connections in HTTClient now correctly logged
5) Fixed a memory leak in HTTPServerSync for SSE (Server-Sent-Events) event streams.

CHANGES IN VERSION 5.2.0
------------------------
1)  HTTPClient will search for a 'Marlin.config', if no 'web.config' file has been found.
2)  The WebConfigIIS now reads the handlers as configured in the IIS admin tool. You can read the 
    handler definitions by requesting them from the IISSite within the config with:
      
    IISHandlers* GetAllHandlers (CString p_site);
    IISHandler*  GetHandler     (CString p_site,CString p_handler);

    You can find sites with "GetSiteConfig(ind)"

3)  The trace/logging of the HTTPClient has been extended for multi-part buffers
    Tracing is now done on a per-bufferpart basis, so that each part can have it's own hexdump
4)  Multipart buffer data do no longer have a default charset of "utf-8".
    The Microsoft .NET framework no logers accepts these in a multipart buffer message.
5)  The sites (HTTPSite & HTTPSiteIIS) have a new method to check whether the IIS server site
    runs in Anonymous authentication mode or not. The method is:
    "bool GetHasAnonymousAuthentication(HANDLE p_token);"
6)  XML/SOAP messages can now be saved to file with their intrinsic BOM (Byte-Order-Mark) through
    an extra optional parameter in SaveFile()
7)  You can now create BOM's (Byte-Order-Mark) with a XMLEncoding parameter in "ConstructBOM(encoding)"
8)  Stacktraces have been more nicely formatted for 64 bits function addresses.
9)  Handling of StdExceptions now make the distinction between safe-exception-handling and regular
    C++ language exceptions
10) Command redirection has been optimized in the "Redirect" class
11) Minor SonarQube quality checks have been reworked in the code.
12) During the reading of the IIS WebConfig inherent conflicting options on a site are found.
    The IISite definition now has a new member (m_error) that can be queried with IISWebConfig.GetError()
    First conflict that has been defined now is the case where both "anonymous" and other authentication
    methods are defined for a site. Those other authentication methods will never be used by IIS, as 
    long as a site has anonymous authentication defined.
    Products can now decide on the outcome of the IISWebConfig.GetError() wether to continue or not.
    The place where to do this check is typically in the ServerApp derived class in "InitInstance"

CHANGES IN VERSION 5.1.1
------------------------
1)  Changed all catching of exceptions from "StdException*" to "StdException&"
    StdException is now an exception class without a base class
    AutoSeTranslator is an auto-object around the previous held translator function
    Added CException translator to StdException

CHANGES IN VERSION 5.1.0
------------------------
1)  Applications can now autolink the Marlin.lib library by including <Marlin.h> in their general
    stdafx.h file. All you need to do for the linker is specifying the "$(SolutionDir)lib\" path.
2)  XMLdatatype for adding a XMLElement can now specify and extra "XDT_Type" mask on the datatype
    as in "AddElement(base,"elemname",XDT_String|XDT_Type,"my-message");"
    This will automatically add the XML datatype to a node as an extra attribute. In this example
    the node will become:

    <elemname type="string">my-message</elemename>

3)  The logfile has an extra flush just before the destruction of the writer-thread. This is to 
    flush last closing messages in the log message queue.
4)  Fix for a bug in HTTPServerIIS while reading a mixture of short and longer messages

CHANGES IN VERSION 5.0.3
------------------------
1)  The framework now makes use of the "_set_se_translator" functionality to translate SEH
    exceptions to regular exceptions. This makes programming with this framework far more robust.
    BEWARE: Change all the "catch(CString& str)" functionality in your programs to the new
    "catch(StdException* er)" type of catching exceptions.

    As a second best, you can also try to catch the regular "CException" from the MFC framework!!

CHANGES IN VERSION 5.0.2
------------------------
1)  Various maintainability changes (virtual destructors), code cleanup, to shut up SonarQube
    quality analyzer.
2)  Stacktrace analyzer has lowered the access rights to IIS.

CHANGES IN VERSION 5.0.1
------------------------
1)  Aborting an event stream after 64K chunks must be done, instead of a close. This ensures that
    the client will try to reconnect in the EventSource to the server.
2)  Correction for Firefox for reading chunks in the general "ReceiveIncomingRequest" for IIS.

CHANGES IN VERSION 5.0.0
========================
1)  The MarlinModule can now support multiple applications in one IIS application pool. There is 
    not just one ServerApp (g_server is gone!) but rather a new "ServerApp" derived object in the 
    "OnApplicationStart" will be made. And likewise destroyed in "OnApplicationStop".
    In order to make use of this version of Marlin, you must program the following changes in your
    existing "ServerApp" derived application:

    a)   Create "ServerAppFactory" derived class with one member "CreateServerApp". 
         This factory now controls which ServerApp to create. Most possibly only one;
         The factory removes the need for a global 'g_server' declaration.
    b)   Change the constructor of your class to have the following three parameters
         -  A pointer to the "IHttpServer" class of IIS
         -  A CString with the application name (the name of the site in IIS)
         -  A CString with the pathname to the webroot
         You must pass these parameters on to the ServerApp in your constructor;
    c)   Change the implementation of your "ServerApp". Change the implementation of the
         "InitInstance" method to call it's main class "Serverapp::InitInstance()" 
         BEFORE anything else;
    d)   Change the implementation of your "ServerApp". Change the implementation of the
         "ExitInstance" method to call it's main class "Serverapp::ExitInstance()" 
         AFTER anything else;

    You can find examples of these in the test framework in the "MarlinServerIIS" and in the
    MarlinServerIISWC projects.
    To accomodate these changes the "MarlinModule" implementation to link the framework to IIS
    has been extensively updated.

*** End of file ***
