RELEASENOTES MARLIN VERSION 6.x
===============================

For releasenotes of the previous main version (5.x), see the separate file "Releasenotes_v5.txt".
This document contains all release notes and remarks beginning with version 6.0. The document
would otherwise grow to large and complex.

Version 6.x contains the new HTTPSYS user mode driver as a HTTPServerAPI replacement
It is tested through the "MarlinServerSync" test program only
----------------------------------------------------------------------------------------------

CHANGES IN VERSIN 6.5.0 
-----------------------
1)  Renewed all certificates in the 'Certificate' directory. Dates of the certificates have been
    extended from 1-1-2020 to 1-1-2030
2)  Added an extra wrapper around the "CRITICAL_SECTION" lock. See the header "AutoCritical.h"
3)  Replaced the "double" datatype in the JSONMessage by the 'bcd' class. This prevents JSON
    messages from carrying rounding errors in decimal numbers. This has a serious impact on the
    implementation of the JSON Message and the WSDL Cache!
4)  Upgraded the MarlinModule to be able to run multiple websites in one applicationPool (again!)
    This functionality was broken in some earlier version. 
    The ServerApp now has an extra function for the MarlinModule: SitesInApplicationPool()
    This prevents the MarlinModule from destructing the application to soon, when one of the 
    websites is stopping.
    Please upgrade your MarlinModule at the earliest possible moment!
5)  The IIS testclient and testserver have been upgraded to be able to run again in one 
    application pool (after point 4).
    Please be aware that if you plan to run multiple websites in one application pool to have a 
    look at the "TestMarlinServerAppFactory". The app factory now may only create as many
    applications as there are application pools.
    If you plan in your application to support more than one website: please upgrade your 
    server application factory likewise.
6)  Added the "AutoAttachToProcess" application. This allows us to directly debug a w3wp.exe
    process right from the start, making it easier to debug an IIS server process such as the
    MarlinModule.
    Thanks to Eyal Rosner and this article on CodeProject
    https://www.codeproject.com/Articles/1090417/How-to-Set-Debugger-to-Auto-Attach-on-Process-Star
7)  An alert system has been added. SvcReportError will standard report to the zero (0) alert module.
    Alerts can be created in an alerts directory.
    New Alerts directory modules can be created by calling "ConfigureApplicationAlert("name")"
    at the startup of your program. This registration function will return a alert number.
8)  The message DLL registration and g_svcname (service name) for the WMI message system 
    was fixed. The message DLL will now also get installed if you start the IIS server from 
    within the "marlinserver start" mechanism. This includes the start from the server applet
    as well.
9)  The "EnsureFile" object now has an extra method "GrantFullAccess". With this method it is 
    possible to set full access rights on a file or directory.

CHANGES IN VERSION 6.4.0
------------------------
1)  Rewrite of the 'MarlinModule'. All actions, memory allocations and de-allocations have been
    redirected to the loaded appliction DLL. This way the MarlinModule can service a wider range
    of applictions of different Marlin versions.
  	BUT: See the interface header of "ServerApp". The order of the vtable with virtual methods
         there should stay stable for a long time in order to service later Marlin versions.
         You can add virtuals, but never remove or re-order the current "ServerApp.h" header.
2)  Remark the 'C' exported functions in "ServerApp.cpp" where the MarlinModule calls the 
    newly created application. This is where we handle the daily work for the application.
3)  Smaller runtimers by rewriting the global constant names to a isolated object.
    Runtimers should implement a "LoadConstants()" function to set there names, if so required.
	  Mostly in the "MarlinServer" derived class or a main function.

CHANGES IN VERSION 6.3.0
-----------------------------------
This is an partly finished version!
-----------------------------------
1)  The project solution and project files for the server part have been re-organized. All projects
    are now in one solution, apart from the client testers. This way we still can have two Visual
    Studio's running and debug the server and client side together.
    The HostedWebCore and the sync/async servers have now been integrated in the one and only  
    "TestMarlinServer" object. That server can now be started in three ways:
    - As a stand-alone program
    - As a NT service
    - As an IIS module plugin
2)  A skeleton ServerApplet program has been integrated in the framework, as many workable programs
    need such a server applet to configure a service and start it.
3)  Running an IIS service is now simple. Register "MarlinModule.dll" or "MarlinModuleDebug.dll" within IIS.
    and register two things in your website:
    - A "*" handler for the module (MarlinModule or MarlinModuleDebug.dll)
    - In the web config two "AppSettings"
      1) MarlinModule (for the name of your DLL)
      2) DllDirectory (for the directory where you keep your binaries)
      Normally these should be under "C:\inetpub\wwwroot", but see the source in "MarlinModule.cpp"!!
4)  The IIS testset is running again. Work is in progress to let everything work in all three configurations
5)  A new "ServerMain.cpp" has been introduced to start an application from the command line. See the testserver
    and consequently the commands that the "TestMarlinServer" has. In the testset you can now use:
    - Marlinserver start          -> Starting your server (standalone, NT-Services, IIS)
    - Marlinserver stop           -> Stopping your server (standalone, NT-Services, IIS)
    - Marlinserver restart        -> Restarting (stopping and starting)   (standalone, NT-Services, IIS)
    - Marlinserver query          -> Query whether the server is running  (standalone, NT-Services, IIS)
    - Marlinserver install        -> Installing a NT-Service
    - Marlinserver uninstall      -> Removing a NT-Service
6)  Added some general classes to use when running the serverapplet or the servermain:
    - MarlinServer
    - ServerMain
    - ServiceReporting
    - BrowseForDirectory
    - BrowseForFilename
    - ExecuteProcess
7)  A skeleton "MarlinServerMessages.mc" file for the WMI logging has been added to the server program
8)  Referer check in MarlinModule has been made more lenient. Just logs a warning in the Marlin.log that
    a referer does not match with the requested server. This is necessary for HTTP rewriting in IIS.


CHANGES IN VERSION 6.2.1
------------------------
1)  Added the following classes in order to build better servers that can devide between IIS, 
    NT-Service or as a stand alone server.
    - ServerMain:       This is the main class your stand-alone server should derive from
    - MarlinServer:     The command line framework to start NT-Services and stand-alone servers
    - ServiceReporting: Reporting to the MS-Windows WMI event log registration
    - AppConfig:        This is the main class your application config should derive from

CHANGES IN VERSION 6.2.0
------------------------
1)  All instrumentation of the libraries, executables and DLLS's have been altered from the 
    static linking model to the dynamic linking model. This makes it neccesary to rely on the 
    external C++ runtimers installed on the target machine.
    This change was imminent through the implemention of the MarlinModule. The static memory model
    did not work well with the WAS and the w3wp.exe started by IIS. It resulted in debug memory
    crashes on every string.

CHANGES IN VERSION 6.1.2
------------------------
1)  New parameter "keep" in the logfile.config definition. In case of server log rotation, this is 
    the maximum number of logfiles to keep in one directory. This makes it possible to configure to 
    retain less logfiles than all the logfiles of the last two months.
2)  The "CreateServer" function for IIS applications has dropped two parameters (error-object and 
    logfile object). These objects can no longer be shared between applications. Logfiles will now 
    be separate for all application pools and the general MarlinModule in the inetpub/log directories.
    The separation was needed to gain more stability in the co-creation of web applications.
3)  It is now possible to place a debug version of the MarlinModule in the 'inetsrv' directory of 
    MS-Windows, provided you place it under a different name. e.g. "MarlinModuleDebug.dll"
    This makes it possible to integrate debug and release versions of applications within the same
    IIS environment.
4)  It is now mandatory to define a HTTP handler in an IIS site that relates to the MarlinModule you
    are using. Without such an handler, the website can never be started.
5)  Bug fix for CrackedURL when re-printing an URL. For the case when "m_secure" was set to true, 
    but no "https" prefix was provided. In this case the prefix will be appended an 's' to fix this.
6)  Bug fix in XMLMessage in finding an element with a namespace prefix. When searching WITH a 
    namespace prefix, the same names in other namespaces will be ignored.
7)  Bug fix in WSDL reading from a file, where the result of the read was not returned from the method.
8)  Bug fix in JSON parser for the line number.
9)  Bug fix for a report object in ServerApp.
10) If the settings of the application DLL are wrong, or the DLL for the MarlinModule is missing,
    the application pool will now be stopped in the "Unhealthy" method. This is a necessity, because
    the pool would otherwise be restarted many times a second.

CHANGES IN VERSION 6.1.1
------------------------
1)  Changed the working of the SiteFilters. Must now return a boolean value (true) to keep going in
    evaluating the SiteHandlers if you want to. So you can terminate the evaluation by:
    - Sending a response
    - Setting the status of the HTTPMessage
    and then return a 'false'. The general handler of HTTPSite will then:
    - Skip the HTTP handlers;
    - Send the return message (if still needed).
2)  Changed the processing of SiteFilters in HTTPSite. SiteFilters can return there own status in the
    HTTPMessage, instead of always producing a status "500 Server error"
3)  Added the possibility to add pre-emptive authentication to the HTTPClient. So it doesn't do a
    full round-trip to discover a HTTP status 401.
	To use this feature You must set HTTPClient.SetPreEmptiveAuthorization(DWORD) to one of the 
	following values for authentication:

	#define WINHTTP_AUTH_SCHEME_BASIC      0x00000001
	#define WINHTTP_AUTH_SCHEME_NTLM       0x00000002
	#define WINHTTP_AUTH_SCHEME_PASSPORT   0x00000004
	#define WINHTTP_AUTH_SCHEME_DIGEST     0x00000008
	#define WINHTTP_AUTH_SCHEME_NEGOTIATE  0x00000010


CHANGES IN VERSION 6.1.0
------------------------
1)  Added a new sub project "MarlinModule". This module is the one-and-only module to add to IIS
    the *real* DLL with the ServerApp derived project will be loaded by this MarlinModule bij reading
    the 'web.config' node <appSettings><add key="MarlinModule" value="path to the dll" />
2)  Added 32bits and 64bits installers for MarlinModule to extend your IIS environment
3)  Duplicate loading of DLL's is now prevented by the new MarlinModule.
4)  DLL's should always be in a subdirectory under the directory of your 'web.config' file!!
5)  Do not create any "web.config" with your HTTPManager any more. Always use "Marlin.config"
    to prevent any confusion in your environment.
6)  Optionally by prepending a '@' to your DLL path, you can set any absolute path to a dll.
    Please be advised that in this case duplicate DLL's or duplicate application pools are possible,
    but not neccessarily working.
7)  Try to adhere to the following default scheme:
    - 1 Application pool per website
    - 1 web.config per website
    - 1 DLL with a ServerApp derived application per website
    - 1 unique port per website. Do not use duplicate ports in your environment
8)  ZLIB directory for compressed content: varioius small code improvements (SonarQube based)
9)  Fixed double reset of the HTTPClient
10) Fixed leaking handle and leaking critical section resources from "Redirect" class
11) Added application settings to WebConfigIIS to be able to determine the DLL of an application
12) Fixed endless loop in checking of SOAPMessages in incoming WSDL cache
13) Added an check on an XMLElement node name if the name is a valid identifier.

CHANGES IN VERSION 6.0.1
------------------------
1) Upgraded to Visual Studio 2019
2) Small fixes for basic authentication of HTTP calls
3) Default charset of a MultiPart Buffer HTTP Call is "UTF-8"

CHANGES IN VERSION 6.0.0
------------------------
1) Nothing :-) Just a delivery

CHANGES IN VERSION 6.0.0 Beta 2
-------------------------------
1) Keep-alive connections fully operational

CHANGES IN VERSION 6.0.0 Beta 1
-------------------------------
1) NTLM/Digest/Kerberos authtentication working through standard SSPI interfaces
2) Rudementary implementation of keep-alive connections
3) HTTPServer now does send "Date" response header for authentication purposes

CHANGES IN VERSION 6.0.0 Pre-Alpha
----------------------------------
1) The HTTPSYS driver has been added to the project. It is a user mode implementation of the
   standard MS-Windows HTTP-Server-API as serviced by the "HTTP.SYS" kernel mode driver.
   It supports version 2.0 of the HTTPServer-API only.
   The driver was created for various reasons:
   - Educational purposes
   - Non-disclosed functions (websockets)
   - Because it can be done :-)
   Not implemented features of HTTP.SYS are:
   - Asynchronous I/O
   - HTTP 2.0 Server push
   - HTTP-Server-API release 1.0 functions.

   Applications can use the HTTPSYS driver just by altering the LINK input from "httpapi.lib" to "httpsys.lib"
   Nothing else is required to use the driver!

2) Yet to be implemented before we reach the definitive 6.0.0 stage are:
   - NTLM authentication
   - Digest authentication
   - Negotiate/Kerberos authentication
   
   Basic authentication IS working
